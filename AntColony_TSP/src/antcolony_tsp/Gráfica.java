/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antcolony_tsp;



import java.awt.Graphics;
import java.awt.Point;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFileChooser;

import javax.swing.JOptionPane;




/**
 *
 * @author Intel
 */
public class Gráfica extends javax.swing.JFrame {
    
    private Grafo grafos;
    private Colonia colonia;
    private double  matrix [][]; //matrix que va a salir 
    private double auxMatrix [][]; //Matrix auxiliar
    
    private int nuevaCity;
    private boolean newCity = true;
    private String [] nombresCity;
    
    
    
    private boolean esCargado = false;
  
    private String txtNvo = "";   //atributos para la parte de guardar y abrir archivos txt
    JFileChooser seleccionado = new JFileChooser();
    File archivo;
    Archivos gestion = new Archivos();
         

    /**
     * Creates new form Gráfica
     */
    public Gráfica() {
        initComponents();
        setVisible(true);
        setResizable(false);
this.grafox.setLocation(0,0);
        
        setLocationRelativeTo(null);
        
        this.grafox.setOpaque(true);
        
        this.jLabel1.setOpaque(false);
    }
    
    //constructor para abrir las ventanas sin el setVisible porque me estaba pa unas cosas
    public Gráfica(int x){
        initComponents();
        setResizable(false);
        
        this.grafox.setLocation(0,0);
        
        setLocationRelativeTo(null);
        
        this.grafox.setOpaque(true);
        
        this.jLabel1.setOpaque(false);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        grafox = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Beta = new javax.swing.JTextField();
        Elimnar = new javax.swing.JButton();
        Ro = new javax.swing.JTextField();
        NumHormigas = new javax.swing.JTextField();
        NumIteraciones = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        Correr = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        Nodos = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InformeCorrida = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnFijarGrafo = new javax.swing.JButton();
        Alpha = new javax.swing.JTextField();
        Agregar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Jmenu = new javax.swing.JMenu();
        CargarG = new javax.swing.JMenuItem();
        guardarG = new javax.swing.JMenuItem();
        Cerrar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setUndecorated(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        grafox.setBackground(new java.awt.Color(0, 102, 102));
        grafox.setForeground(new java.awt.Color(51, 153, 255));
        grafox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("(NOTA: para agregar ciudades, dé click en el cuadrado de arriba)");

        Beta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BetaActionPerformed(evt);
            }
        });

        Elimnar.setText("Eliminar Nodo");
        Elimnar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ElimnarActionPerformed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jCheckBox1.setText("Predeterminado");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setText("Datos de la Colonia");

        Correr.setText("Correr");
        Correr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CorrerActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Nodos");

        Nodos.setEditable(false);
        Nodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NodosActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel3.setText("Grafos");

        InformeCorrida.setEditable(false);
        InformeCorrida.setColumns(20);
        InformeCorrida.setRows(5);
        jScrollPane1.setViewportView(InformeCorrida);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Alpha");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Beta");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Evaporación");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Iteraciones");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Hormigas");

        btnFijarGrafo.setText("Fijar grafo");
        btnFijarGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFijarGrafoActionPerformed(evt);
            }
        });

        Alpha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlphaActionPerformed(evt);
            }
        });

        Agregar.setText("Agregar Nodo");
        Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarActionPerformed(evt);
            }
        });

        Jmenu.setText("Archivo");
        Jmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Jmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmenuActionPerformed(evt);
            }
        });

        CargarG.setText("Cargar Grafo");
        CargarG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarGActionPerformed(evt);
            }
        });
        Jmenu.add(CargarG);

        guardarG.setText("Guardar Grafo");
        guardarG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarGActionPerformed(evt);
            }
        });
        Jmenu.add(guardarG);

        Cerrar.setText("Cerrar Programa");
        Cerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarActionPerformed(evt);
            }
        });
        Jmenu.add(Cerrar);

        jMenuBar1.add(Jmenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(628, 628, 628))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(grafox, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(Elimnar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Agregar)
                        .addGap(56, 56, 56))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jLabel3))
                    .addComponent(jLabel9)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel8))
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NumIteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(NumHormigas, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(Correr)
                                .addGap(35, 35, 35))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Nodos, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnFijarGrafo)
                                        .addGap(32, 32, 32))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(Beta, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jCheckBox1))
                                            .addComponent(Alpha, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addContainerGap())))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Ro, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(grafox, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nodos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(btnFijarGrafo))
                .addGap(86, 86, 86)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Alpha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Beta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Ro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(Correr, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(86, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NumHormigas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(NumIteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63))))
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Elimnar)
                    .addComponent(Agregar))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
ArrayList<Point> lista = new ArrayList<Point>();
ArrayList<String> nombresCiudades = new ArrayList<String>(); //arreglo para el nombre de ciudades
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        

  
       
 Graphics g = this.getGraphics();
        
     


        if( (evt.getX()>grafox.getX()) && (evt.getX()<(grafox.getX()+grafox.getWidth()))  && (evt.getY()>=grafox.getY()) && 
                (evt.getY()<(grafox.getY()+grafox.getHeight())) ){
    boolean aux = true; //auxiliar booleano para las validaciones
        if(lista.size()<20 && this.newCity){ 
        //Dibujar punto
            g.drawRect(evt.getX(), evt.getY(), 4, 4);
            lista.add(new Point(evt.getX(), evt.getY()));
            if(aux == true){
                
                aux = false;
                
            }

            while (aux == false){

     
              try{  
                
            this.nombresCiudades.add(JOptionPane.showInputDialog("Ingresa el nombre de la ciudad: ").trim());      
            
            
            int espacio = 0;//variable que ayuda a verificar si todos los caracteres de la cadena de texto son espacios vacíos
            
                    for (int i = 0; i < this.nombresCiudades.get(this.nombresCiudades.size()-1).length(); i++) {
                
                        if(this.nombresCiudades.get(this.nombresCiudades.size()-1).charAt(i) == ' '){
                            espacio++;
                            
                        }
     
                  }

            if(this.nombresCiudades.get(this.nombresCiudades.size()-1).equals("") ||this.nombresCiudades.get(this.nombresCiudades.size()-1).length() == espacio){
                
                aux = false;
                JOptionPane.showMessageDialog(null,"No has escrito ningún nombre, hazlo", "ERROR", JOptionPane.ERROR_MESSAGE);
                
            }else{
                aux = true;
            }

            }catch (NullPointerException e){
                
                aux = false;
                
                JOptionPane.showMessageDialog(null, "Debes ingresar el nombre de la ciudad", "ERROR", JOptionPane.ERROR_MESSAGE);
     
            }

            }        
           

   
         if(lista.size()==2){
             
           g.drawLine(lista.get(lista.size()-1).x, lista.get(lista.size()-1).y, lista.get(lista.size()-2).x, lista.get(lista.size()-2).y); 
           
           this.matrix = new double[lista.size()][lista.size()];
           
           
             for (int i = 0; i < lista.size(); i++) {
                 for (int j = 0; j <lista.size(); j++) {
                     
                     if(i==j){
                         this.matrix[i][j] = 0;
                     }
                     else {
                         
                         if(j==lista.size()-1){
                             break;
                         }
                     
                   //Validación de respuestas
                        if(aux==true){
                            
                            aux = false;
                         
                            //inicio while
                     while(aux == false){
                         
                         try{
                         
                         
                         Double distancia = Double.valueOf(JOptionPane.showInputDialog("Ingresa la distancia de la ciudad 1 a la 2:").trim());
                         
                     if(distancia == 0){
                         aux = false;
                         
                         JOptionPane.showMessageDialog(null, "La distancia no puede ser nula", "ERROR", JOptionPane.ERROR_MESSAGE);
                         
                        }else if(distancia < 0){
                            
                         JOptionPane.showMessageDialog(null, "La distancia no puede ser negativa", "ERROR", JOptionPane.ERROR_MESSAGE);
                            
                        }

                        else{
                         
                        aux = true;
                     this.matrix[i][j] = distancia;
                     this.matrix[j][i] = this.matrix[i][j];
                     
                        }
                         
                         }catch(NullPointerException | NumberFormatException e){
                             
                             JOptionPane.showMessageDialog(null, "Por favor, coloca una distancia", "ERROR", JOptionPane.ERROR_MESSAGE);
                             
                             aux = false;
                             
                         }
                            
                     }//fin while

                   }             
                     }  
                 }
             }
             
             this.auxMatrix = this.matrix;

               
         }  

         else if(lista.size()>2 && lista.size()<21){

             /*
                 for para poder conectar los nodos anteriores con el nuevo nodo (el último del arreglo)
                */
                 
                 for (int i = 0; i < lista.size()-1; i++) {
                     
                 g.drawLine(lista.get(i).x, lista.get(i).y, lista.get(lista.size()-1).x, lista.get(lista.size()-1).y);     
             }
             this.auxMatrix = this.matrix;
             
             this.matrix = new double [lista.size()][lista.size()];
             
             
             for (int i = 0; i < this.matrix.length; i++) {
                 for (int j = 0; j < this.matrix.length; j++) {
                     
                     this.matrix[i][j] = 0;
                     
                     /*
                     Si se mantienen los valores de la matrix anterior
                     */
                     if(i < this.auxMatrix.length && j <this.auxMatrix.length){
                         
                         this.matrix[i][j] = this.auxMatrix[i][j];
                         this.matrix[j][i] = this.auxMatrix[j][i];
     
                     }else if(i == matrix.length-1){
                         
                         if((j+1) == matrix.length){
                             this.matrix[i][j] = 0;
                             break;
                         }
                         
       
                     //Validación de respuestas
                        if(aux==true){
                            
                            aux = false;
                         
                            
                       //inicio while     
                     while(aux == false){
                         
                         
                         try{
                         
                         
                      double distancia = Double.valueOf(JOptionPane.showInputDialog("Ingresa la distancia de la ciudad " 
                           + (j+1) + " a la " +(matrix.length)+ ":").trim());
          
                     if(distancia == 0){
                         aux = false;
                         
                         JOptionPane.showMessageDialog(null, "La distancia no puede ser nula", "ERROR", JOptionPane.ERROR_MESSAGE);
                         
                        }else if(distancia < 0){
                            
                         JOptionPane.showMessageDialog(null, "La distancia no puede ser negativa", "ERROR", JOptionPane.ERROR_MESSAGE);
                            
                        } else{
                         
                     aux = true;
                     this.matrix[i][j] = distancia;
                     this.matrix[j][i] = this.matrix[i][j];
                     
                        }
                     
                         }
                         catch(NullPointerException | NumberFormatException e){
                             JOptionPane.showMessageDialog(null, "Por favor, coloca una distancia", "ERROR", JOptionPane.ERROR_MESSAGE);
                             
                             aux = false;
                             
                         }
                     
                     } // fin while
                     
                     
                     
                     }
                     }
                 }
             }
                 
         
         }

           if(lista.size()>=4){
               
               if(lista.size()==20){
                   JOptionPane.showMessageDialog(null, "Se ha alcanzado el número máximo de ciudades" , "MENSAJE",JOptionPane.WARNING_MESSAGE);
                   this.newCity = false;
   
               } else{
               
                this.nuevaCity = JOptionPane.showConfirmDialog(null,"¿Deseas añadir una nueva ciudad?","Seleccionar opción", JOptionPane.YES_NO_OPTION);
                
                if(this.nuevaCity==1){
                    
                    this.newCity = false; 
                    
                    this.nombresCity = new String[this.nombresCiudades.size()];
                    this.nombresCity = this.nombresCiudades.toArray(nombresCity);
    
                }
                else
                {
                    this.newCity = true;
     
                }
                
                }
            }
           
        }
        }           
    }//GEN-LAST:event_formMousePressed

    private void BetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BetaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BetaActionPerformed

    private void ElimnarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ElimnarActionPerformed
        // TODO add your handling code here:

        try{
            if( grafos.getVertices() > 4){
                grafos.eliminar();
                Nodos.setText(Integer.toString(Integer.parseInt(Nodos.getText())-1));
            }
            else
            JOptionPane.showMessageDialog(null, "No puede eliminar mas nodos");
        } catch (NullPointerException e){
            JOptionPane.showMessageDialog(null, "Debe guardar primero un grafo");
        } 
        
    }//GEN-LAST:event_ElimnarActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox1.isSelected()){
            Alpha.setText("1");
            Beta.setText("2");
            Ro.setText("0.5");
        }
        else {
            Alpha.setText("");
            Beta.setText("");
            Ro.setText("");
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void CorrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CorrerActionPerformed
        
        Elimnar.setEnabled(true);
        Agregar.setEnabled(true);
        btnFijarGrafo.setEnabled(true);
        if(this.esCargado){
            ventanaAbrir ventanaAbrir = new ventanaAbrir();
            grafos = new Grafo(ventanaAbrir.cantCities,ventanaAbrir.matDistances, ventanaAbrir.nomCities);
            InformeCorrida.setText("");
            int a = 0;
            int b = 0;
            double p = 0;
            int it = 0;
            int hor = 0;
            boolean verificar = true;
                            try{
                a = Integer.parseInt(Alpha.getText().trim());
                b = Integer.parseInt(Beta.getText().trim());
                p = Double.parseDouble(Ro.getText().trim());
                it = Integer.parseInt(NumIteraciones.getText().trim());
                hor = Integer.parseInt(NumHormigas.getText().trim());
                if ( a<0 || b<0 || p<0 || p>1 || it<0 || hor<0 || grafos == null) {
                    verificar = false;
                    JOptionPane.showMessageDialog(null, "Ingrese bien los datos, fila de ors");
                }
            } catch( NumberFormatException | NullPointerException e ){
                verificar = false;
                JOptionPane.showMessageDialog(null, "Ingrese bien los datos");
            }
            if(verificar){
                colonia = new Colonia(a, b, p, grafos, hor, it);
                colonia.startSolucion();
                InformeCorrida.setText(colonia.s);
            }
        }else{           
            if(this.newCity == true){

                if(lista.size()<4){

           JOptionPane.showMessageDialog(null, "Debes agregar, como mínimo, 4 ciudades", "ERROR", JOptionPane.ERROR_MESSAGE);

                }

                JOptionPane.showMessageDialog(null,"Aún te encuentras agregando ciudades", "ERROR", JOptionPane.ERROR_MESSAGE);

            }else if(this.newCity == false){

                InformeCorrida.setText("");
                int a = 0;
                int b = 0;
                double p = 0;
                int it = 0;
                int hor = 0;
                boolean verificar = true;
                try{
                    a = Integer.parseInt(Alpha.getText().trim());
                    b = Integer.parseInt(Beta.getText().trim());
                    p = Double.parseDouble(Ro.getText().trim());
                    it = Integer.parseInt(NumIteraciones.getText().trim());
                    hor = Integer.parseInt(NumHormigas.getText().trim());
                    if ( a<0 || b<0 || p<0 || p>1 || it<0 || hor<0 || grafos == null) {
                        verificar = false;
                        JOptionPane.showMessageDialog(null, "Ingrese bien los datos");
                    }
                } catch( NumberFormatException | NullPointerException e ){
                    verificar = false;
                    JOptionPane.showMessageDialog(null, "Ingrese bien los datos");
                }
                if(verificar){
                    colonia = new Colonia(a, b, p, grafos, hor, it);
                    colonia.startSolucion();
                    InformeCorrida.setText(colonia.s);
                }
            }
        }       
    }//GEN-LAST:event_CorrerActionPerformed

    private void NodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NodosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NodosActionPerformed

    private void btnFijarGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFijarGrafoActionPerformed
        // TODO add your handling code here:
        boolean verificar = true;
        int nodos = 0;
        try{
            nodos= matrix.length;
            if(nodos <= 3 || nodos >=21){
                verificar = false;
                JOptionPane.showMessageDialog(null, "Recuerde el limite de nodos");
            }
        } catch(NumberFormatException | NullPointerException e){
            verificar = false;
            JOptionPane.showMessageDialog(null, "Ingrese bien los datos");
        }
        if (verificar) {
            Nodos.setText(Integer.toString(matrix.length)); //
            grafos = new Grafo(matrix.length, matrix, this.nombresCity);
        }

    }//GEN-LAST:event_btnFijarGrafoActionPerformed

    
    
    private void AlphaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlphaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AlphaActionPerformed


    
    private void AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarActionPerformed
        // TODO add your handling code here:
        
        try{
            if( grafos.getVertices() <= 20)
            {
            grafos.agregar();
            Nodos.setText(Integer.toString(Integer.parseInt(Nodos.getText())+1));
            }
            else
            JOptionPane.showMessageDialog(null, "No puede agregar mas nodos");
        } catch (NullPointerException e){
            JOptionPane.showMessageDialog(null, "Debe guardar primero un grafo");
        }
        
        
    }//GEN-LAST:event_AgregarActionPerformed

    private void CerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_CerrarActionPerformed

    private void JmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JmenuActionPerformed

    private void CargarGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarGActionPerformed
        if(seleccionado.showDialog(this, "Abrir archivo")== JFileChooser.APPROVE_OPTION){
            archivo = seleccionado.getSelectedFile();
            if(archivo.canRead()){
                if(archivo.getName().endsWith("txt")){
                    String contenido = gestion.abrirTexto(archivo);
                    ventanaAbrir load = new ventanaAbrir();
                    load.getTxtArea().setText(contenido);
                    load.show();
                    this.dispose();
                }else{
                    JOptionPane.showMessageDialog(null, "Por favor seleccione un archivo válido", "Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_CargarGActionPerformed

    private void guardarGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarGActionPerformed
        try{
        VentanaGuardar ventanaGuardar = new VentanaGuardar(conversionesDeTexto.convertirATxt(matrix, grafos.getNombres(), grafos.getVertices(), grafos.getAristas()));
        ventanaGuardar.show();
        this.dispose();
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Por favor fije un grafo primero", "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_guardarGActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gráfica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gráfica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gráfica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gráfica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gráfica().setVisible(true);
            }
        });
    }

    
    public double[][] getMatrix() {
        return matrix;
    }

    public void setMatrix(double[][] matrix) {
        this.matrix = matrix;
    }

    public String getTxtNvo() {
        return txtNvo;
    }

    public void setTxtNvo(String txtNvo) {
        this.txtNvo = txtNvo;
    }

    public void setEsCargado(boolean esCargado) {
        this.esCargado = esCargado;
    }

    public JButton getAgregar() {
        return Agregar;
    }

    public JButton getElimnar() {
        return Elimnar;
    }

    public JButton getBtnFijarGrafo() {
        return btnFijarGrafo;
    }

    public String[] getNombresCity() {
        return nombresCity;
    }

    public void setNombresCity(String[] nombresCity) {
        this.nombresCity = nombresCity;
    }
    
    
    
    
    

    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agregar;
    private javax.swing.JTextField Alpha;
    private javax.swing.JTextField Beta;
    private javax.swing.JMenuItem CargarG;
    private javax.swing.JMenuItem Cerrar;
    private javax.swing.JButton Correr;
    private javax.swing.JButton Elimnar;
    private javax.swing.JTextArea InformeCorrida;
    private javax.swing.JMenu Jmenu;
    private javax.swing.JTextField Nodos;
    private javax.swing.JTextField NumHormigas;
    private javax.swing.JTextField NumIteraciones;
    private javax.swing.JTextField Ro;
    private javax.swing.JButton btnFijarGrafo;
    private javax.swing.JLabel grafox;
    private javax.swing.JMenuItem guardarG;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
